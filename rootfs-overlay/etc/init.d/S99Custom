#!/bin/sh

logger "Starting g_mass_storage script"
logger "https://github.com/zador-blood-stained/fel-mass-storage"

cmdline=$(cat /proc/cmdline)

case "$cmdline" in
	*"root=/dev/"*)
	logger "Kernel started with root= command line parameter, exiting"
	exit 0
	;;
esac

if [ -e "/dev/mmcblk1" ]; then
	TARGET=/dev/mmcblk1
	TYPE="MMC 2 (eMMC)"
elif [ -e "/dev/mmcblk0" ]; then
	TARGET=/dev/mmcblk0
	TYPE="MMC 0 (SD)"
else
	logger "No SD/eMMC device found"
	exit 0
fi

export_mmc()
{
    logger "Exporting $TYPE ($TARGET)"

    echo "0" > /sys/bus/platform/devices/sunxi_usb_udc/otg_role

    modprobe -r g_mass_storage
    modprobe g_mass_storage file=$TARGET removable=0 ro=0 stall=0 iProduct="Allwinner device $TYPE"

    echo "2" > /sys/bus/platform/devices/sunxi_usb_udc/otg_role

    logger "Done"
}

recovery_partX()
{
    local TARF=$1
    local PART=$2

    [ -f "$TARF" ] && {
        logger "recovery $PART from $TARF ..."

        echo `date` >> /mnt/recovery.log
        echo "$TARF -> $PART" >> /mnt/recovery.log

        zcat ${TARF} > ${PART}
    }
}

# mmcblk0p3 var have the recovery flags
mount ${TARGET}p3 /mnt || exit -1
[ -f /mnt/.auto_recovery ] || {
    logger "do recovery manual..."
    umount /mnt
    exit 0
}
umount /mnt

#part4 is backup storage
mount ${TARGET}p4 /mnt || {
    logger "mount recovery data part failed"
    exit -1
}
# part1 root-fs
recovery_partX /mnt/rootfs.img.gz ${TARGET}p1
# part2 opt: qpt-utils
recovery_partX /mnt/opt.img.gz ${TARGET}p2
# part3 vars
recovery_partX /mnt/vars.img.gz ${TARGET}p3
umount /mnt

logger "finished recovery export fs to USB-HOST..."
export_mmc

logger "Shutting down recovery"
# echo "0" > /sys/bus/platform/devices/sunxi_usb_udc/otg_role
# modprobe -r g_mass_storage

[ ! -f "/tmp/no_poweroff" ] && poweroff
